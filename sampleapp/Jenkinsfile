pipeline {
    agent any
    environment {

        AZURESVP = credentials('azuresp')
        CONTAINER_REGISTRY = "azurecontainer77.azurecr.io"
        AZURESP = credentials('azuresp')
        AZURE_RESOURCE_GROUP = "aksResourceGrouprg"
        AKS_CLUSTER_NAME = "myAKSClusteraks"
        IMAGE_NAME = "sampleapp"
        IMAGE_TAG = "latest"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: ' https://github.com/SaiPrabhu88/neom-aks.git']])
            }
        }
        stage('Connect to ACR') {
            steps {
                sh 'az login --service-principal -u $AZURESVP_CLIENT_ID -p $AZURESVP_CLIENT_SECRET -t $AZURESVP_TENANT_ID'
                sh 'az account set -s $AZURESVP_SUBSCRIPTION_ID'
                sh 'az acr login --name $CONTAINER_REGISTRY'
            }
        }
        stage('Build and Push Image') {
            steps {
                sh 'docker build -t $CONTAINER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG sampleapp/.'
                sh 'docker push $CONTAINER_REGISTRY/$IMAGE_NAME:$IMAGE_TAG'
            }
        }
        stage('Cluster Connectivity') {
            steps {
                sh 'az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP --name $AKS_CLUSTER_NAME --overwrite-existing'
            }
        }
        stage('Deployment') {
            steps {
                sh 'kubectl apply -f sampleapp/deployment.yml'
                sh 'kubectl apply -f sampleapp/service.yml'
            }
        }
    }
    post {
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                               [pattern: '.propsfile', type: 'EXCLUDE']])
        }
    }
}